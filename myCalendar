#!/usr/bin/env python3

import datetime
import sys
from calbase import *
import curses
import os.path

weekdays = ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"]
months = ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]

cal_directory = "~/.calendars/"

def month_days(year, month):
    iday = datetime.date(year = year,month = month, day = 1)
    while True:
        yield (iday.isoweekday(), iday)
        iday += datetime.timedelta(days = 1)
        if iday.month != month:
            break;

def calendar_discovery():
    path = os.path.expanduser(cal_directory)

    if not os.path.exists(path):
        return []

    calendars = []

    calendars.append(DB(os.path.join(path, "events.sqlite")))
    calendars.append(BDB(os.path.join(path, "bdays.txt")))

    files = os.listdir(path)
    for cal_file in files:
        if cal_file.endswith(".txt") and cal_file != "bdays.txt":
            calendars.append(TDB(os.path.join(path, cal_file)))

    return calendars

def main(stdscr):
    curses.noecho()
    curses.cbreak()
    stdscr.keypad(True)

    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
                  
    curses.curs_set(False)
    today = datetime.date.today()
    cur_month = today.month
    cur_year = today.year
    selected = today.day

    calendars = calendar_discovery()
    db = EntryJoin(*calendars)
    events = db.get_month(cur_year, cur_month)
    paste_cache = None

    while True:
        stdscr.clear()
        stdscr.addstr(0, 0, "{} {}".format(months[cur_month - 1], cur_year))

        # Print all
        for wd, day in month_days(year=cur_year, month=cur_month):
            stdscr.move(day.day + 1, 5)
            if wd == 7:
                stdscr.addstr(weekdays[wd - 1], curses.color_pair(1))
            else:
                stdscr.addstr(weekdays[wd - 1])
            stdscr.addstr(", {} {}".format(day.isoformat(), events.get(day.isoformat(), "")))
            if day.day == selected:
                stdscr.addstr(day.day + 1, 0, "=>")

        key = stdscr.getch()

        if key == curses.KEY_UP:
            selected = max(1, selected - 1)
        elif key == curses.KEY_DOWN:
            selected += 1
        elif key == curses.KEY_LEFT:
            cur_month -= 1
            if cur_month == 0:
                cur_month = 12
                cur_year -= 1
            events = db.get_month(cur_year, cur_month)
        elif key == ord("y"):
            paste_cache = events["{}-{:02}-{:02}".format(cur_year, cur_month, selected)]
        elif key == ord("p"):
            if paste_cache is not None:
                events["{}-{:02}-{:02}".format(cur_year, cur_month, selected)] = paste_cache
                db.set_day(cur_year, cur_month, selected, paste_cache)
        elif key == curses.KEY_RIGHT:
            cur_month += 1
            if cur_month == 13:
                cur_month = 1
                cur_year += 1
            events = db.get_month(cur_year, cur_month)
        elif key == ord("\n"):
            curses.curs_set(True)

            curses.echo()
            text = stdscr.getstr(selected + 1, 20)
            curses.noecho()
            db.set_day(cur_year, cur_month, selected, text.decode("utf-8"))
            events = db.get_month(cur_year, cur_month)
            curses.curs_set(False)

curses.wrapper(main)
