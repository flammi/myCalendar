#!/usr/bin/env python3

import datetime
import sys
from calbase import *
import curses
import os.path

weekdays = ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"]
months = ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]

cal_directory = "~/.calendars/"

def my_edit(screen, posy, posx, prev_text, length):
    text = prev_text
    start = posx
    posx += len(prev_text)
    while True:
        screen.move(posy,posx)
        c = screen.getch()
        if c == curses.KEY_BACKSPACE:
            text = text[:posx-start-1] + text[posx-start:]
            posx -= 1
        elif c == 27: # seems to be the ESC key 
            return prev_text
        elif c == curses.KEY_LEFT:
            posx -= 1
        elif c == curses.KEY_RIGHT:
            if len(text) > posx-start:
                posx += 1
        elif c == ord("\n"):
            return text
        else:
            posx += 1
            text = text[:posx-start] + chr(c) + text[posx-start:]
        posx = min(max(start, posx), start+length)
        screen.move(posy, start)
        screen.addstr(text + " ")

def enter_prompt(screen, prompt):
    ymax, xmax = screen.getmaxyx()
    curses.curs_set(1)
    screen.move(ymax-1,0)
    screen.addstr(prompt)
    res = my_edit(screen, ymax-1, len(prompt), "", 20)
    curses.curs_set(0)
    return res

def month_days(year, month):
    iday = datetime.date(year = year,month = month, day = 1)
    while True:
        yield (iday.isoweekday(), iday)
        iday += datetime.timedelta(days = 1)
        if iday.month != month:
            break;

def calendar_discovery():
    path = os.path.expanduser(cal_directory)

    if not os.path.exists(path):
        return []

    calendars = []

    calendars.append(DB(os.path.join(path, "events.sqlite")))
    calendars.append(BDB(os.path.join(path, "bdays.txt")))

    files = os.listdir(path)
    for cal_file in files:
        if cal_file.endswith(".txt") and cal_file != "bdays.txt":
            calendars.append(TDB(os.path.join(path, cal_file)))

    return calendars

def parse_user_date(text, cur_month, cur_year):
    data = text.split("-")[::-1]
    d = int(data[0])
    m = int(data[1]) if len(data) > 1 else cur_month
    y = int(data[2]) if len(data) > 2 else cur_year
    return (d,m,y)

def main(stdscr):
    curses.noecho()
    curses.cbreak()
    stdscr.keypad(True)

    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
                  
    curses.curs_set(False)
    today = datetime.date.today()
    cur_month = today.month
    cur_year = today.year
    selected = today.day
    scroll_start = 1

    calendars = calendar_discovery()
    db = EntryJoin(*calendars)
    events = db.get_month(cur_year, cur_month)
    paste_cache = None

    while True:
        stdscr.clear()
        stdscr.addstr(0, 0, "{} {}".format(months[cur_month - 1], cur_year))

        ymax, xmax = stdscr.getmaxyx()

        scroll_length = 0

        # Print all
        last_day_month = list(month_days(year=cur_year, month=cur_month))[-1][1].day
        for wd, day in month_days(year=cur_year, month=cur_month):
            if day.day < scroll_start:
                continue

            ypos = day.day + 1 - (scroll_start - 1)
            
            if ypos >= ymax:
                break

            stdscr.move(ypos, 5)
            scroll_length +=1
            
            if wd == 7:
                stdscr.addstr(weekdays[wd - 1], curses.color_pair(1))
            else:
                stdscr.addstr(weekdays[wd - 1])
            stdscr.addstr(", {} {}".format(day.isoformat(), events.get(day.isoformat(), "")))
            if day.day == selected:
                stdscr.addstr(ypos, 0, "=>")
       
        key = stdscr.getch()

        if key == curses.KEY_UP:
            selected = max(1, selected - 1)
            scroll_start = min(scroll_start, selected)
        elif key == curses.KEY_DOWN:
            selected = min(last_day_month, selected + 1)
            scroll_start = max(scroll_start, selected - scroll_length + 1)
        elif key == curses.KEY_RESIZE:
            scroll_start = 1
        elif key == curses.KEY_LEFT:
            cur_month -= 1
            if cur_month == 0:
                cur_month = 12
                cur_year -= 1
            events = db.get_month(cur_year, cur_month)
        elif key == ord("y"):
            paste_cache = events["{}-{:02}-{:02}".format(cur_year, cur_month, selected)]
        elif key == ord("p"):
            if paste_cache is not None:
                events["{}-{:02}-{:02}".format(cur_year, cur_month, selected)] = paste_cache
                db.set_day(cur_year, cur_month, selected, paste_cache)
        elif key == ord("q"):
            break
        elif key == ord("g"):
            #Goto date
            date = enter_prompt(stdscr, "Go to date: ")
            selected, cur_month, cur_year = parse_user_date(date, cur_month, cur_year)
            events = db.get_month(cur_year, cur_month)
        elif key == ord("t"):
            today = datetime.date.today()
            cur_month = today.month
            cur_year = today.year
            selected = today.day
            events = db.get_month(cur_year, cur_month)
        elif key == curses.KEY_RIGHT:
            cur_month += 1
            if cur_month == 13:
                cur_month = 1
                cur_year += 1
            events = db.get_month(cur_year, cur_month)
        elif key == ord("\n"):
            curses.curs_set(True)

            #text = stdscr.getstr(selected + 1, 20)
            text = my_edit(stdscr, selected + 1, 20, events.get("{}-{:02}-{:02}".format(cur_year, cur_month, selected), ""), 40)
            db.set_day(cur_year, cur_month, selected, text)
            events = db.get_month(cur_year, cur_month)
            curses.curs_set(False)

# Hack to get a fast response if ESC is pressed
os.environ["ESCDELAY"] = "25"

curses.wrapper(main)
